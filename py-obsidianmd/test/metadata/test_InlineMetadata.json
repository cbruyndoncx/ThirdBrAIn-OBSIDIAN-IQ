{
    "tests": {
        "description": "tests related to the InlineMetadata object",
        "default_meta_type": ">>MetadataType.INLINE",
        "tests-parse": {
            "n1": {
                "description": "file with no frontmatter (n1)",
                "data": "n1",
                "inputs": {},
                "expected_output": {
                    "meta_dict": {
                        "up": [
                            "[[note 1]]",
                            "[[note 2]]",
                            "[[note 3]]"
                        ],
                        "brim": [
                            "s1",
                            "s2"
                        ],
                        "tork": [
                            "2",
                            "3",
                            "4"
                        ]
                    }
                }
            },
            "n2": {
                "description": "file with no inline metadata (n2)",
                "data": "n2",
                "inputs": {},
                "expected_output": {
                    "meta_dict": {}
                }
            },
            "n4": {
                "description": "file with frontmatter (n4)",
                "data": "n4",
                "inputs": {},
                "expected_output": {
                    "meta_dict": {
                        "c1": [
                            "foo",
                            "foo bar"
                        ],
                        "c2": [
                            "foo",
                            "foo bar",
                            "biz",
                            "baz"
                        ],
                        "c3": [
                            "3",
                            "4",
                            "5",
                            "5"
                        ],
                        "tags": [
                            "t4",
                            "t5",
                            "t6",
                            "t5"
                        ]
                    }
                }
            },
            "n5": {
                "description": "metadata fields of multiple words",
                "data": "n5",
                "inputs": {},
                "expected_output": {
                    "meta_dict": {
                        "this is an inline field": [
                            "1",
                            "2",
                            "3"
                        ],
                        "another field": [
                            "45"
                        ],
                        "one-word": [
                            "0"
                        ],
                        "oneWord": [
                            "0"
                        ]
                    }
                }
            }
        },
        "tests-to_string": {
            "n1": {
                "description": "NA",
                "data": "n1",
                "inputs": {},
                "expected_output": {
                    "field_name": "exp_inline_to_string"
                }
            },
            "n2": {
                "description": "NA",
                "data": "n2",
                "inputs": {},
                "expected_output": {
                    "field_name": "exp_inline_to_string"
                }
            },
            "n4": {
                "description": "NA",
                "data": "n4",
                "inputs": {},
                "expected_output": {
                    "field_name": "exp_inline_to_string"
                }
            }
        },
        "tests-update_content": {
            "n4_not_inplace_bottom": {
                "description": "add inline meta to the bottom, inplace = False",
                "data": "n4",
                "inputs": {
                    "position": "bottom",
                    "inplace": false
                },
                "expected_output": {
                    "field_name": "exp_inline_upd_bottom_inplace_FALSE"
                }
            },
            "n4_not_inplace_top": {
                "description": "add inline meta to the top, inplace = False",
                "data": "n4",
                "inputs": {
                    "position": "top",
                    "inplace": false
                },
                "expected_output": {
                    "field_name": "exp_inline_upd_top_inplace_FALSE"
                }
            },
            "n4_inplace": {
                "description": "add inline meta to the top, inplace = False",
                "data": "n4",
                "inputs": {
                    "position": "bottom",
                    "inplace": true
                },
                "expected_output": {
                    "field_name": "exp_inline_upd_inplace_TRUE"
                }
            }
        },
        "tests-exists": {
            "n1": {
                "description": "NA",
                "data": "n1",
                "inputs": {},
                "expected_output": {
                    "exists": true
                }
            },
            "n2": {
                "description": "NA",
                "data": "n2",
                "inputs": {},
                "expected_output": {
                    "exists": false
                }
            }
        },
        "tests-erase": {
            "n5": {
                "description": "NA",
                "data": "n5",
                "inputs": {},
                "expected_output": {
                    "field_name": "exp_inline_erase"
                }
            }
        },
        "tests-remove_and_update": {
            "n5_1": {
                "description": "remove and ignore enclosed metadata",
                "data": "n5",
                "inputs": {
                    "k": "oneWord",
                    "l": null,
                    "position": "bottom",
                    "inplace": true
                },
                "expected_output": {
                    "field_name": "exp_inline_remove_and_replace"
                }
            }
        }
    }
}